// ChatGPT Usage: Partial

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int     @id @default(autoincrement())
  spotify_id          String  @unique
  username            String
  top_artists         Json
  top_genres          Json
  currently_playing String?
  is_banned           Boolean @default(false)
  pfp_url             String?
  bio                 String?

  // Sessions
  session   Session? @relation(fields: [sessionId], references: [id])
  sessionId Int?

  // Friends
  // If a User is in requested and requesting then they are considered friends
  requested  User[] @relation("friends")
  requesting User[] @relation("friends")

  // Connections
  connectionComputed Boolean @default(false)
  connections1 Connection[] @relation("Connections 1")
  connections2 Connection[] @relation("Connections 2")

  // Reports
  reports_as_offender Report[] @relation("Offender Reports")
  reports_as_reporter Report[] @relation("Reporter Reports")
}

model Connection {
  id            Int  @id @default(autoincrement())
  user_id_1     Int
  user_id_2     Int
  match_percent Int

  // Constraints
  user_1 User @relation("Connections 1", fields: [user_id_1], references: [id], onDelete: Cascade)
  user_2 User @relation("Connections 2", fields: [user_id_2], references: [id], onDelete: Cascade)

  @@unique([user_id_1, user_id_2])
}

model Session {
  id      Int    @id @default(autoincrement())
  members User[]
}

model Report {
  id                Int           @id @default(autoincrement())
  offending_user_id Int
  reporting_user_id Int
  reason            ReportReasons
  reason_text       String?
  report_context    Json
  timestamp         DateTime @default(now())

  // Constraints
  offender User @relation("Offender Reports", fields: [offending_user_id], references: [id])
  reporter User @relation("Reporter Reports", fields: [reporting_user_id], references: [id])
}

enum ReportReasons {
  OFFENSIVE_LANGUAGE
  PLAYLIST_ABUSE
  SPAMING_CHAT
  OTHER
}
